//ButterWorth band Pass Filter
//Filter Name:BP
//Filter Order:4.0
//Filter cutoff1 frequency (-3dB):50.0Hz
//Filter cutoff2 frequency (-3dB):100.0Hz
//Filter samplig frequency:1000.0Hz

//*******************Global Variables

//Filter Coefficients
const byte BP_a_bytes[32]={0x2b,0x41,0xbf,0xbf,0x5c,0x71,0x37,0x3f,0x88,0x8b,0xd2,0xbf,0x8,0x92,0x46,0x3f,0xdb,0x41,0xc2,0xbf,0x92,0x8d,0x5b,0x3f,0x47,0x18,0xe9,0xbf,0x78,0x5d,0x6b,0x3f};
const float* BP_a = (float*) BP_a_bytes;

const byte BP_b_bytes[48]={0x0,0x6b,0xda,0x39,0x8a,0x6e,0x5a,0x3a,0x14,0x72,0xda,0x39,0x0,0x0,0x80,0x3f,0xda,0xfb,0xff,0x3f,0xb4,0xf7,0x7f,0x3f,0x0,0x0,0x80,0x3f,0x0,0x0,0x0,0xc0,0x0,0x0,0x80,0x3f,0x0,0x0,0x80,0x3f,0x0,0x0,0x0,0xc0,0x0,0x0,0x80,0x3f};
const float* BP_b = (float*) BP_b_bytes;

//Delay Variables
float BP_w[8]={0,0,0,0,0,0,0,0};



//*******************Update function
//This function must be called with a sampling frequency of 1000.0Hz
//Input: float x, Filter Input
//Return: float, Filter Output
float BP_Update(float x)
{
	float y;
	float w;
	//Biquad 0
	w = x-BP_w[0]*BP_a[0]-BP_w[1]*BP_a[1];
	y = w*BP_b[0]+BP_w[0]*BP_b[1]+BP_w[1]*BP_b[2];
	BP_w[1]=BP_w[0];
	BP_w[0]=w;
	//Biquad 1
	w = y-BP_w[2]*BP_a[2]-BP_w[3]*BP_a[3];
	y = w*BP_b[3]+BP_w[2]*BP_b[4]+BP_w[3]*BP_b[5];
	BP_w[3]=BP_w[2];
	BP_w[2]=w;
	//Biquad 2
	w = y-BP_w[4]*BP_a[4]-BP_w[5]*BP_a[5];
	y = w*BP_b[6]+BP_w[4]*BP_b[7]+BP_w[5]*BP_b[8];
	BP_w[5]=BP_w[4];
	BP_w[4]=w;
	//Biquad 3
	w = y-BP_w[6]*BP_a[6]-BP_w[7]*BP_a[7];
	y = w*BP_b[9]+BP_w[6]*BP_b[10]+BP_w[7]*BP_b[11];
	BP_w[7]=BP_w[6];
	BP_w[6]=w;
	return y;
}