//ButterWorth band stop Filter
//Filter Name:BS
//Filter Order:4.0
//Filter cutoff1 frequency (-3dB):50.0Hz
//Filter cutoff2 frequency (-3dB):100.0Hz
//Filter samplig frequency:1000.0Hz

//*******************Global Variables

//Filter Coefficients
const byte BS_a_bytes[32]={0x2b,0x41,0xbf,0xbf,0x5c,0x71,0x37,0x3f,0x88,0x8b,0xd2,0xbf,0x8,0x92,0x46,0x3f,0xdb,0x41,0xc2,0xbf,0x92,0x8d,0x5b,0x3f,0x47,0x18,0xe9,0xbf,0x78,0x5d,0x6b,0x3f};
const float* BS_a = (float*) BS_a_bytes;

const byte BS_b_bytes[48]={0xdf,0x79,0x29,0x3f,0xf2,0xee,0x98,0xbf,0x77,0x9c,0x29,0x3f,0x0,0x0,0x80,0x3f,0x91,0x7,0xe7,0xbf,0xa8,0xc,0x80,0x3f,0x0,0x0,0x80,0x3f,0x36,0xda,0xe6,0xbf,0xbe,0xe6,0x7f,0x3f,0x0,0x0,0x80,0x3f,0xc1,0xde,0xe6,0xbf,0xbe,0xcb,0x7f,0x3f};
const float* BS_b = (float*) BS_b_bytes;

//Delay Variables
float BS_w[8]={0,0,0,0,0,0,0,0};



//*******************Update function
//This function must be called with a sampling frequency of 1000.0Hz
//Input: float x, Filter Input
//Return: float, Filter Output
float BS_Update(float x)
{
	float y;
	float w;
	//Biquad 0
	w = x-BS_w[0]*BS_a[0]-BS_w[1]*BS_a[1];
	y = w*BS_b[0]+BS_w[0]*BS_b[1]+BS_w[1]*BS_b[2];
	BS_w[1]=BS_w[0];
	BS_w[0]=w;
	//Biquad 1
	w = y-BS_w[2]*BS_a[2]-BS_w[3]*BS_a[3];
	y = w*BS_b[3]+BS_w[2]*BS_b[4]+BS_w[3]*BS_b[5];
	BS_w[3]=BS_w[2];
	BS_w[2]=w;
	//Biquad 2
	w = y-BS_w[4]*BS_a[4]-BS_w[5]*BS_a[5];
	y = w*BS_b[6]+BS_w[4]*BS_b[7]+BS_w[5]*BS_b[8];
	BS_w[5]=BS_w[4];
	BS_w[4]=w;
	//Biquad 3
	w = y-BS_w[6]*BS_a[6]-BS_w[7]*BS_a[7];
	y = w*BS_b[9]+BS_w[6]*BS_b[10]+BS_w[7]*BS_b[11];
	BS_w[7]=BS_w[6];
	BS_w[6]=w;
	return y;
}